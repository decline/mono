version: '3.8'

services:
  app:
    container_name: app
    hostname: app
    build:
      dockerfile: Dockerfile
      target: development
    entrypoint: ./docker/entrypoint.sh
    volumes:
      - ./:/app:delegated
      - node-modules:/app/node_modules
      - nx-cache:/tmp/nx
      - jest-cache:/tmp/jest
      - cypress-cache:/tmp/cypress
      - pnpm-store:/root/.local/share/pnpm/store
    command: nx run app:serve
    ports:
      - '4200:4200'
  # @TODO implement health check
  #    depends_on:
  #      app-api:
  #        condition: service_healthy

  api:
    container_name: api
    hostname: api
    build:
      dockerfile: Dockerfile
      target: development
    entrypoint: ./docker/entrypoint.sh
    volumes:
      - ./:/app:delegated
      - node-modules:/app/node_modules
      - nx-cache:/tmp/nx
      - jest-cache:/tmp/jest
      - cypress-cache:/tmp/cypress
      - pnpm-store:/root/.local/share/pnpm/store
    command: nx run api:serve
    environment:
      NODE_ENV: development
      PORT: 3333
      NPM_TOKEN: '${NPM_TOKEN?err}'
      DATABASE_URL: postgres://user:password@db:5432/app
      MIKRO_ORM_CLI: /app/apps/api/src/mikro-orm.config.ts
      MIKRO_ORM_CLI_USE_TS_NODE: true
      MIKRO_ORM_CLI_TS_CONFIG_PATH: /app/apps/api
    ports:
      - '3333:3333'
      - '9229:9229'
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    hostname: db
    image: postgres:14.5
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
    ports:
      - '5432:5432'
    healthcheck:
      test: pg_isready -U user -d app -h 127.0.0.1

volumes:
  node-modules:
  nx-cache:
  jest-cache:
  cypress-cache:
  pnpm-store:
